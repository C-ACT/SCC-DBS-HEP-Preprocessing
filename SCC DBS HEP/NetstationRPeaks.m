function [] = NetstationRPeaks(all_data_ecg,isCondition, comments, mph, mpd, mpp,Sample_rate, Subject_No)
    mph;
    mpd;
    mpp;
    %% SCC DBS Variation
    % Extract and print in "epoched (matrix)" format NetStation formatted
    % strings of R peaks from EKG file 
    % In Workspace: all_ekg_data, conditions
    % Date of Creation/Edit: 08-04-2022
    % Author: Samantha Pitts @ Mount Sinai West Waters Lab
    % Additions: Visualizing performance of algorithm
    % References: 
            % Source info: https://www.mathworks.com/help/wavelet/ug/r-wave-detection-in-the-ecg.html
            % 
            % Goldberger A. L., L. A. N. Amaral, L. Glass, J. M. Hausdorff, P. Ch. Ivanov, R. G. Mark, 
            % J. E. Mietus, G. B. Moody, C-K Peng, H. E. Stanley. "PhysioBank, PhysioToolkit, and PhysioNet: 
            % Components of a New Research Resource for Complex Physiologic Signals." Circulation 101. Vol.23, 
            % e215-e220, 2000. http://circ.ahajournals.org/cgi/content/full/101/23/e215
            % 
            % Moody, G. B. "Evaluating ECG Analyzers". http://www.physionet.org/physiotools/wfdb/doc/wag-src/eval0.tex
            % 
            % Moody G. B., R. G. Mark. "The impact of the MIT-BIH Arrhythmia Database." IEEE Eng in Med and Biol. 
            % Vol. 20, Number 3, 2001), pp. 45-50 .
    
        %% Command Window Signal Quality Check
        %T = timetable(Var','SampleRate',Fs) where Fs = 1000 in NetStation
        
    %% R Peak Detection, Synthesized (for all subjects of interest)
    close all
    %% Targeted Matrices
    %Instruction: Copy variable names from workspace into excel. 
    %Filter for ECG values in COLUMN. Use:  Variable names - CHEP 1.csv
    %Convert names into "Plain Text." Paste between brackets below. 
    %Use all ECGs! (1-29)
    all_data_ecg; 
%     Subject_No;
    plots = 1; %unique trials for peak detection
    p = 1;
    f1 = figure('Name','R Peaks Localized by Abs Square Data');
    %Method: Fourth Order Butterworth bp filter to isolate reasonable HR. DWT Method.
    f2 = figure('Name','R Peaks Localized by Processed Peak Prominence');
    
    %% Define the start and end sample of a condition; 
    %Use threshold to define label
    %Condition_Range = [starting sample, ending sample;... c2]
    ECGmat = (all_data_ecg); 
    range = classify_sample(ECGmat, isCondition, comments);
    condition_label = comments{1,isCondition};
    
    %% Find R_R of all peaks
    %Locate Rpeaks by sample number/ index
    R_peaks = [];

    time_s = make_time_s(ECGmat,Sample_rate); %generate time scale
    [R_peaks,locs] = find_Rpeaks(time_s,ECGmat,plots,f1,f2,p,mph, mpd, mpp); %<<---indices per trial
    
    %Find the first range of the 1st condition up to the second condition(-1)
    %in the RPeaks
    
    %Get length and repmat the variable
    
    %If last condition go to end or to 'IBEG'
    


    %%%%%%%%%% Add marker to where the conditions split on a graph
%     col = find(isCondition==1);
%     for i = 1:length(col)
%         ConditionName = comments.(col){1};
%     end
%     
%     z = repmat(x,1,length(R_peaks_trial));
%     Trial_Label = [Trial_Label, z];
    %%%%%%%%%%%%%%%%%%%%%%%%%%




    %for NS
    Epoch_No = repmat([1],1,length(R_peaks)); %Create an epoch number for number 
    % of matrices generated by mat file
    %% Format Peak Via NetStation
    R_peaks_NS = R_peaks;
    
    %% ADDENDUM: Time for NS
    R_peaks_NS; %locations of R peaks;
    R_peaks_NS =sort((R_peaks_NS - 1)); %NS adjusted peaks (for visual purposes);
    time_NS = seconds(R_peaks_NS/Sample_rate); %into sec per Sample Rate = 1000Hz
    time_NS_formatted = duration(time_NS,'Format','hh:mm:ss.SSS'); %formatted NS times
    
    %% Print all peaks
    % T = table(R_peaks_clean);
    filename = sprintf("NS_R_Peaks_Subject%d_All.txt",Subject_No); 
    % writetable(T,filename);
    
    fileID = fopen(filename,'w');
    %fprintf(fileID,'%6s %12s\n','x','exp(x)'); %title
    fprintf(fileID,'%d\n',R_peaks_NS);
    fclose(fileID);
    %% Print NetStation Times
    filename = sprintf("NSEpoch_String_R_Peaks_Subject%d_All.txt",Subject_No); 
    
    fileID = fopen(filename,'w');
    time = string(time_NS_formatted);
    for i = 1:length(Epoch_No)
        fprintf(fileID,'_[%d] %s\n',Epoch_No(i),time(i));
    end
    fclose(fileID);
    
    
    %% Print all peaks
    filename = sprintf("NSEpoch_R_Peaks_Subject%d_All.txt",Subject_No); 
    
    fileID = fopen(filename,'w');
    fprintf(fileID,'%d\n',R_peaks_NS);
    fclose(fileID);
    


    %% Print Labels
    filename = sprintf("NSEpoch_Label_Subject%d_All.txt",Subject_No); 
    fileID = fopen(filename,'w');
    start_sample = range(1,1);
    cond_matrix = []; %matrix of cateories of conditions; 0 is a non-category - null value

range

    %find start
     cond_place = 1;

    for idx = 1:length(R_peaks_NS) %Parse through each peak
    
        %Find range
        peak_sample_num = R_peaks_NS(idx)+1; 
    
        %Peaks detected prior to conditions
        if start_sample > peak_sample_num
                    fprintf(fileID,'%s\n','null');
                    cond_matrix = [cond_matrix 0];
        else


    
            %parse through each condition sample start
            while cond_place<=length(condition_label) %indicate which condition out of available conditions
              %Condition; sample number does not exceed condition end point
              %or below starting point
              if peak_sample_num <= range(cond_place,2) && peak_sample_num >= range(cond_place,1)
                  %assign condition
                  fprintf(fileID,'%s\n',condition_label{cond_place});
                  cond_matrix = [cond_matrix cond_place];
                  break
              elseif peak_sample_num > range(cond_place,2)
                  next_cond_place = cond_place+1;
                  cond_place=next_cond_place;
              else
                   %nullify samples outside of condition boundaries on the right side
                   fprintf(fileID,'%s\n','null');
                   cond_matrix = [cond_matrix 0];
                   break
              end
            end

        end


    end

% 
% 
%     idx = idx+1;
%     
%     for i =  1:length(R_peaks_NS+1)
%     for i = 1:length(condition_label)
%         if i == 1 %for very start of first condition, find starting point, the rest, label null
%             start_idx = find(R_peaks_NS+1 >= range(i,1));
%             start_idx = start_idx(1);
%             while idx < start_idx %before conditions
%                 fprintf(fileID,'%s\n','null');
%                 idx = idx+1;
%             end
%         end
%         
%            % idx = start_idx;
%    
%            
%     condition_label 
%     length(condition_label)
% 
%      R_peaks_NS(idx)+1
%    
%      range(i,2)
% 
%       length(R_peaks_NS)
%         %makes sure to parse through all peaks detected
%         while R_peaks_NS(idx)+1 <= range(i,2) %last element in condition (+1 bc og subtracted from peaks)
%             cl = (condition_label);
%             fprintf(fileID,'%s\n',cl{i});
%             idx = idx + 1;
%         end
%     
%     end
    fclose(fileID);

    %plot the conditions
    %plot epoch 
    figure(f2)
    hold on
    yyaxis right
    
    %len = length(cond_matrix);
  
    plot(locs,cond_matrix, 'p')
    ylabel('Condition No.')
    hold off
    
    %% save figure
    filename = sprintf("Sub%d_Peak_by_epoch",Subject_No); 
    figure(f2)
    savefig(f2,filename);
end

%% Helper Functions:
%% Generate the time scale
function time_s = make_time_s(ECGmat, EEGSamplingRate)
   
    EEG_fs = EEGSamplingRate; %sampling frequency equal to EEG rate
    
    % Where sample_n = length(HEP)
    sample_n = length(ECGmat);
    
    EEG_ts = 1/EEG_fs; %in s
    time_s = linspace(0,EEG_ts*(sample_n-1),sample_n); %time scale in s
    
end
%% Find R Peaks
function [R_index,locs] = find_Rpeaks(tm,ecgsig,plots,f1,f2,p, mph, mpd, mpp)


%finding the peaks of n trials is equivalent to n plots (Ex:28)
%establish two figures f1, f2 to save plot analysis
    %% Load and plot an ECG waveform where the R peaks of the QRS complex have
    % been annotated by two or more cardiologists.
    
%     %load mit200
%     figure
%     plot(tm,ecgsig)
%     hold on
%     plot(tm,ecgsig)
%     xlabel('Seconds')
%     ylabel('Amplitude')
%     title('Subject - 20 - Community, Matrix 2')
    
    %% DNC - The 'sym4' wavelet resembles the QRS complex, which makes it a good choice 
    % for QRS detection. 
    % To illustrate this more clearly, extract a QRS complex and plot the result 
    % with a dilated and translated 'sym4' wavelet for comparison.
    
        % qrsEx = ecgsig(4560:4810);
        % [mpdict,~,~,longs] = wmpdictionary(numel(qrsEx),'lstcpt',{{'sym4',3}});
        % figure
        % plot(qrsEx)
        % hold on
        % plot(2*circshift(mpdict(:,11),[-2 0]),'r')
        % axis tight
        % legend('QRS Complex','Sym4 Wavelet')
        % title('Comparison of Sym4 Wavelet and QRS Complex')
    
    %% Preprocessing 
    load EKG_Butterworth_BP.mat
    ecgsig = filter(EKG_Butterworth_BP,ecgsig);

    %% DNC - Use the maximal overlap discrete wavelet transform (MODWT) to enhance the R peaks 
    % in the ECG waveform. The MODWT is an undecimated wavelet transform, 
    % which handles arbitrary sample sizes.
    wt = modwt(ecgsig,5);
    wtrec = zeros(size(wt));
    wtrec(4:5,:) = wt(4:5,:);
    y = imodwt(wtrec,'sym4');
    
    %% Use the squared absolute values of the signal approximation built from the
    % wavelet coefficients and employ a peak finding algorithm to identify the R peaks.
    
    % If you have Signal Processing Toolboxâ„¢, you can use findpeaks to locate the peaks.
    % Plot the R-peak waveform obtained with the wavelet transform annotated with the 
    % automatically-detected peak locations.
    

    %% Prior 
    %y = abs(y).^2;

    %% Parameters  
    [qrspeaks,locs] = findpeaks(y,tm,'MinPeakHeight',mph,...
        'MinPeakDistance',mpd,'MinPeakProminence',mpp); %minpeakheight 2.25E5 663+500 =1000
    
    %% For Summary Plots in single file
    n = floor(plots/7);
    check = mod(n,7);
    if check~=0
        n = n+1;
    end

    %% plots (first one for abs squared peak detection)
    figure(f1)
%     subplot(7,n,p)
    hold on
    plot(tm,y)
    plot(locs,qrspeaks,'ro')
    xlabel('Seconds')
    %title('R Peaks Localized by Wavelet Transform with Automatic Annotations')
    hold off

    figure(f2)
%     subplot(7,4,p)
    hold on
    plot(tm,ecgsig)
    idx=[];
    for k= 1:length(locs)
        idx(k) = find(tm==locs(k));
    end
    plot(locs,ecgsig(idx),'ro')
    xlabel('Seconds')
    %title('R Peaks Localized by Raw Data')
    hold off    
    %pause%





    %% Add the expert annotations to the R-peak waveform. Automatic peak detection times are considered 
    % accurate if within 150 msec of the true peak (Â±75 msec)
        % plot(tm(ann),y(ann),'k*')
        % title('R peaks Localized by Wavelet Transform with Expert Annotations')
%     %% DNC - Automated Peak Detection Compared with Raw Signal 
%     figure
%     plot(tm,ecgsig)
%     hold on
%     %edit%
%     locs_y = sqrt(qrspeaks); %for depiction purposes
%     %edit%
%     plot(locs,locs_y,'ro') % edit: plot(locs,qrspeaks,'ro')
%     xlabel('Seconds')
%     ylabel('Amplitude')
%     title('R Peaks Localized by Automatic Annotations')
%     hold off
    
    %% Convert Find peaks into indices
    R_index = ones(1,length(locs)).*-1;
    for i = 1:length(locs)
        R_index(i) = find(tm==locs(i)); %Find index
    end

end


